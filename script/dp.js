(function(window) {
    //TODO testData
    var darkCurrent = [3236,
        3294,
        3203,
        3230,
        3254,
        3253,
        3283,
        3243,
        3196,
        3264,
        3249,
        3261,
        3239,
        3246,
        3272,
        3264,
        3203,
        3227,
        3307,
        3281,
        3255,
        3283,
        3253,
        3276,
        3297,
        3242,
        3269,
        3249,
        3272,
        3253,
        3240,
        3279,
        3257,
        3254,
        3241,
        3305,
        3259,
        3300,
        3246,
        3264,
        3282,
        3314,
        3290,
        3256,
        3282,
        3285,
        3273,
        3280,
        3249,
        3293,
        3291,
        3298,
        3300,
        3301,
        3267,
        3323,
        3247,
        3310,
        3279,
        3308,
        3313,
        3289,
        3278,
        3321,
        3291,
        3271,
        3250,
        3282,
        3265,
        3275,
        3274,
        3281,
        3282,
        3275,
        3279,
        3326,
        3262,
        3296,
        3287,
        3288,
        3241,
        3289,
        3294,
        3296,
        3258,
        3296,
        3300,
        3289,
        3298,
        3298,
        3347,
        3322,
        3320,
        3326,
        3340,
        3315,
        3321,
        3317,
        3301,
        3332,
        3329,
        3336,
        3352,
        3350,
        3287,
        3412,
        3353,
        3358,
        3335,
        3354,
        3325,
        3352,
        3376,
        3362,
        3397,
        3343,
        3386,
        3394,
        3350,
        3409,
        3440,
        3436,
        3477,
        3519,
        3532,
        3594,
        3729,
        3711,
        3806,
        3893,
        3949,
        4050,
        4072,
        4107,
        4160,
        4273,
        4317,
        4354,
        4418,
        4439,
        4512,
        4525,
        4595,
        4636,
        4659,
        4638,
        4708,
        4704,
        4755,
        4824,
        4784,
        4788,
        4840,
        4896,
        4959,
        4987,
        5012,
        5035,
        5015,
        5049,
        5082,
        5107,
        5152,
        5219,
        5198,
        5228,
        5374,
        5399,
        5466,
        5498,
        5460,
        5599,
        5649,
        5699,
        5751,
        5819,
        5813,
        5867,
        5966,
        5974,
        6062,
        6125,
        6226,
        6247,
        6224,
        6353,
        6421,
        6334,
        6457,
        6371,
        6559,
        6557,
        6582,
        6632,
        6530,
        6601,
        6629,
        6713,
        6634,
        6665,
        6699,
        6731,
        6682,
        6722,
        6740,
        6750,
        6627,
        6647,
        6648,
        6660,
        6746,
        6643,
        6647,
        6548,
        6580,
        6642,
        6523,
        6557,
        6502,
        6556,
        6455,
        6415,
        6420,
        6346,
        6304,
        6147,
        6206,
        6193,
        6186,
        6050,
        6125,
        5931,
        5939,
        5858,
        5780,
        5851,
        5668,
        5781,
        5635,
        5648,
        5532,
        5503,
        5500,
        5459,
        5365,
        5410,
        5265,
        5280,
        5201,
        5282,
        5142,
        5150,
        5187,
        5068,
        5054,
        5093,
        5069,
        4978,
        4936,
        4877,
        4904,
        4958,
        4908,
        4790,
        4781,
        4796,
        4765,
        4796,
        4766,
        4763,
        4760,
        4778,
        4636,
        4576,
        4662,
        4631,
        4512,
        4528,
        4492,
        4476,
        4507,
        4531,
        4436,
        4461,
        4376,
        4393,
        4344,
        4378,
        4275,
        4314,
        4230,
        4279,
        4285,
        4211,
        4129,
        4139,
        4129,
        4137,
        4083,
        4006,
        4028,
        3987,
        3990,
        3896,
        3911,
        3887,
        3902,
        3881,
        3813,
        3778,
        3753,
        3715,
        3774,
        3735,
        3728,
        3751,
        3697,
        3667,
        3682,
        3648,
        3693,
        3691,
        3674,
        3661,
        3692,
        3697,
        3634,
        3655,
        3672,
        3629,
        3637,
        3687,
        3593,
        3607,
        3624,
        3654,
        3624,
        3617,
        3607,
        3631,
        3574,
        3604,
        3623,
        3590,
        3549,
        3507,
        3525,
        3540,
        3519,
        3557,
        3533,
        3524,
        3531,
        3494,
        3496,
        3506,
        3514,
        3452,
        3489,
        3461,
        3484,
        3516,
        3483,
        3477,
        3477
    ];
    var whiteboardData = [2263,
        2405,
        2506,
        2591,
        2703,
        2794,
        2875,
        2848,
        3086,
        3160,
        3167,
        3260,
        3439,
        3474,
        3458,
        3528,
        3757,
        3885,
        3899,
        4116,
        4344,
        4681,
        5004,
        5163,
        5524,
        6015,
        6513,
        6793,
        7202,
        7569,
        8127,
        8416,
        8802,
        9162,
        9453,
        9367,
        9795,
        10029,
        10180,
        10274,
        10275,
        10386,
        10469,
        10359,
        10723,
        10821,
        10854,
        11191,
        11457,
        11569,
        12084,
        12560,
        13154,
        13580,
        14137,
        14909,
        15541,
        16389,
        17192,
        17666,
        18454,
        19251,
        20238,
        21161,
        21763,
        22408,
        23131,
        23622,
        24077,
        24593,
        24868,
        25509,
        25892,
        26314,
        26639,
        27290,
        27188,
        26833,
        26959,
        27274,
        27435,
        27002,
        27467,
        26895,
        27505,
        27707,
        27543,
        27732,
        28019,
        28007,
        28792,
        28864,
        28986,
        29010,
        30071,
        29555,
        30556,
        31191,
        31405,
        32302,
        32462,
        34078,
        35093,
        35479,
        35936,
        37324,
        37901,
        39501,
        40054,
        41659,
        41705,
        43201,
        44296,
        45550,
        46307,
        47470,
        47998,
        48691,
        49388,
        50258,
        51058,
        51245,
        52203,
        52436,
        52872,
        52894,
        52482,
        53268,
        52901,
        53110,
        52754,
        52927,
        51778,
        51751,
        51099,
        50656,
        50234,
        49621,
        49463,
        48862,
        48334,
        47741,
        48203,
        47151,
        46740,
        46592,
        46517,
        45595,
        45183,
        45315,
        44704,
        44804,
        44999,
        44722,
        44298,
        44501,
        44431,
        44676,
        45190,
        44845,
        44926,
        45304,
        45678,
        45580,
        45997,
        46439,
        46839,
        47143,
        47291,
        47533,
        47817,
        48406,
        48505,
        49362,
        49602,
        50297,
        50372,
        51229,
        50723,
        52289,
        51842,
        53202,
        52008,
        53480,
        52786,
        54058,
        54276,
        54144,
        55168,
        54677,
        55143,
        55909,
        55328,
        56242,
        55744,
        56131,
        55858,
        56367,
        55697,
        55796,
        55434,
        56546,
        55982,
        55229,
        55275,
        54994,
        55282,
        54281,
        53925,
        53211,
        54187,
        52740,
        52641,
        51762,
        51718,
        51204,
        50093,
        50276,
        49649,
        49127,
        48070,
        47664,
        46761,
        45959,
        45895,
        45123,
        44851,
        43821,
        43129,
        42819,
        41737,
        40264,
        40089,
        38878,
        38965,
        38601,
        37451,
        36882,
        36402,
        35515,
        34562,
        34238,
        34209,
        33142,
        32607,
        32347,
        31401,
        30885,
        30440,
        29993,
        29433,
        28952,
        29094,
        28066,
        27559,
        26950,
        26750,
        26338,
        26223,
        25840,
        25309,
        24921,
        24565,
        23827,
        23737,
        23372,
        23616,
        22913,
        22288,
        22327,
        22131,
        21659,
        21133,
        21180,
        20556,
        20544,
        20217,
        20304,
        19819,
        19578,
        19317,
        19283,
        18835,
        18435,
        18220,
        18151,
        17664,
        17672,
        17383,
        17161,
        16946,
        16607,
        16641,
        16144,
        16299,
        15655,
        15969,
        15463,
        15321,
        15003,
        14808,
        14853,
        14495,
        14213,
        13877,
        13610,
        13373,
        13305,
        13096,
        12999,
        12635,
        12297,
        12390,
        12003,
        11683,
        11652,
        11166,
        10993,
        10611,
        10581,
        10560,
        10111,
        9712,
        9709,
        9370,
        9026,
        8929,
        8605,
        8430,
        8066,
        7930,
        7594,
        7275,
        6960,
        6453,
        6481,
        6027,
        5834,
        5463,
        5237,
        5128,
        4697,
        4464,
        4275,
        4060,
        3755,
        3484,
        3323,
        3156,
        2843,
        2718,
        2556,
        2366,
        2273,
        2006,
        2012,
        1858,
        1798,
        1572,
        1450,
        1359,
        1328,
        1144,
        1188,
        1188
    ];

    window.DPTool = {

        labels: [],

        datas: [],

        dataLength: 1,

        initData: function() {
            if (appConfig.globalConfig)
                DPTool.dataLength = appConfig.globalConfig.collectNum || DPTool.dataLength;
            DPTool.datas = [];
        },

        addData: function(datas) {
            var rnum = DPTool.datas.length - DPTool.dataLength + 1;
            if (rnum > 1) {
                for (var i = 0; i < rnum; i++) {
                    DPTool.datas.shift();
                }
            }
            DPTool.datas.push(datas);
        },

        isDataOk: function() {
            return DPTool.datas.length >= DPTool.dataLength;
        },

        getFinallyData: function() {
            if (DPTool.datas.length == 0)
                return null;

            var finallyData = [];
            for (var j = 0; j < DPTool.datas[0].length; j++) {
                finallyData[j] = 0;
            }
            for (var i = 0; i < DPTool.datas.length; i++) {
                for (var j = 0; j < DPTool.datas[i].length; j++) {
                    finallyData[j] = finallyData[j] + DPTool.datas[i][j];
                }
            }
            for (var i = 0; i < finallyData.length; i++) {
                finallyData[i] = finallyData[i] / DPTool.datas.length;
            }
            return finallyData;
        },

        setXAxis: function(labels) {
            DPTool.labels = labels;
        },

        getXAxis: function() {
            var labels = [];
            for (var i = 0; i < DPTool.labels.length; i++){
                labels[i] = parseFloat(DPTool.labels[i]).toFixed(2);
            }
            return labels;
        },

        getRadiance: function(datas, ra, rb) {
            var ra = ra || appConfig.device.radianceA;
            var rb = rb || appConfig.device.radianceB;
            var newData = [];
            for (i = 0; i < datas.length; i++) {
                var data = ra * datas[i] + rb;
                newData.push(data);
            }
            return newData;
        },

        getReflectivity: function(datas, dc, wd) {
            var dc = darkCurrent || appConfig.device.darkCurrent;
            var wd = whiteboardData  || appConfig.device.whiteboardData;
            var newData = [];
            for (i = 0; i < datas.length; i++) {
                var data = 1.0 * (datas[i] - dc[i]) / (wd[i] - dc[i]);
                newData.push(data);
            }
            return newData;
        },

        getRmPacketLine: function(datas, dc, wd) {
            var m_x = DPTool.getXAxis();
            var m_y = DPTool.getReflectivity(datas,  dc, wd);
            var count = m_x.length; //波段数

            var m_curverX = []; //记录包络线上的值
            var m_curverY = [];
            var CurCount = 0; // 记录包络线上的波段数
            var rm; //交点的纵坐标
            var x0, y0, x1, y1;

            var m_baoluoy = [];
            var result = [];

            var j, m;
            //将包络线赋初值求取上包络线
            m_curverX[0] = m_x[0];
            m_curverY[0] = m_y[0];
            CurCount++;

            var crosscounter = 0;

            for (var i = 0; i < count; i++) {
                x0 = m_x[i];
                y0 = m_y[i];
                //j=i+1;
                for (j = i + 1; j < count; j++) { //连接左边点DN（i，j，1）和右边点DN（i，j，m）生成直线Line（1，m）
                    x1 = m_x[j];
                    y1 = m_y[j]; //准备求j点是否为包络线上的点
                    crosscounter = 0;
                    for (m = 0; m < count; m++) {
                        rm = (m_x[m] - x0) * (y1 - y0) / (x1 - x0) + y0;
                        if (rm >= m_y[m]) {
                            //   在下方
                            crosscounter++;
                        } else {
                            break;
                        }
                    } //for m

                    if (crosscounter == count) { //j是包络线上的点
                        m_curverX[CurCount] = m_x[j];
                        m_curverY[CurCount] = m_y[j];
                        CurCount++;
                        i = j - 1;
                        break;
                    }
                } //for j
            } // for i

            //+++++++++++++++++++++++++++++++++++++++++包络线去除+++++++++++++++++++++++++++++++++++++++++++++++

            var Sposition = 0;
            for (var i = 0; i < CurCount; i++) {

                for (j = 0; j < count; j++) {
                    if (j >= Sposition) {
                        if (m_x[j] != m_curverX[i]) {
                            //如果不是包罗线上的点，则要插值
                            var xx1, xx2, yy1, yy2;
                            xx1 = m_curverX[i];
                            xx2 = m_curverX[i - 1];
                            yy1 = m_curverY[i];
                            yy2 = m_curverY[i - 1];
                            m_baoluoy[j] = (m_x[j] - xx1) * (yy2 - yy1) / (xx2 - xx1) + yy1;
                            m_y[j] = m_y[j] / m_baoluoy[j];

                        } else {
                            //   如果找到包络线上的点
                            m_y[j] = 1;
                            Sposition = j + 1;
                            break;
                        }

                    } //for if;
                } //forj
            } //for i

            for (j = 0; j < count; j++) {
                if (m_y[j] > 1) {
                    m_y[j] = 1;
                }

            }
            for (var i = 0; i < count; i++) {
                result[i] = m_y[i];
            }
            return result;
        }
    }

})(window);
